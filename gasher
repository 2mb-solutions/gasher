#!/bin/bash

clientName="${0##*/}"
clientName="${clientName^}"

show_help()
{
cat << EOF | fold -s
$clientName, brought to you by 2MB Solutions.
released under the terms of the unlicense: http://unlicense.org/

Usage:
$0 -a --account name: Use config file $configPath/config.name. Useful if you have multiple accounts.
$0 -d --direct-messages: View your direct messages.
$0 -D --post-direct-message recipient message: Send a direct message.
$0 -F --favorite status_code: Favorite the notice with the code you chose. The codes are in the brackets just after the name.
$0 -f --follow user_id: follow given user.
$0 -G --group group+uri: subscribe to the given group.
$0 -h --help: This help screen.
$0 -m --mentions: Read your mensions (replies).
$0 -M --music: automatically post the playing song. Supported clients are cmus, mpd, pianobar, and xmms2.
$0 -n --notify: Notify you of new activity. You can add rate=seconds to the config file. The default is 300 (5 minutes).
Add an & to send the process to the background
$0 -p --post: Post to your node. Without arguments, opens \$EDITOR. Considers anything after -p or --post to be the status and will post it to your timeline.
$0 -P --play status_code: Searches for sndup links in the provided status_code and plays them. Players used, in order, are mpv, mplayer, or sox. You can override this in the config file with mediaplayer=choice.
$0 -Q --quote status_code text: Repeat a notice with your own text added. Opens \$EDITOR with the quoted text ready for your addition.
$0 -r --reply status_code: reply to someone. Status_code is the number in brackets after their name.
$0 -R --repeat status_code: Repeat the notice with the code you chose. The codes are in the brackets just after the name.
$0 -s --soundclip: Interactively post a soundclip.
$0 -t --timeline: Read your timeline.
$0 -u --user: Read your statuses only.
For commands that post a status, add v, V, or -verify to view your status before posting.
You can then edit the status or press control+c to cancel.
When requesting statuses, add a number to specify how many to retrieve. for example to see the last three items in your
timeline, type $0 -t3
When entering your password during setup, If the password contains a space, put quotes around it, like "pass word".
EOF
}

die()
{
    >&2 echo "$1" | fold -s
    if [[ "$2" =~ ^[0-9]+$ ]]; then
        if [ $2 -le 255 ]; then
            exit $2
        fi
    fi
        exit 1
}

# Create eventcmd.sh for pianobar
create_eventcmd()
{
# This is left aligned because it echos to a file.
# This should work without modification, and is part of configuring Pianobar
echo '#!/bin/bash
# create variables
while read L; do
k="$(echo "$L" | cut -d "=" -f 1)"
v="$(echo "$L" | cut -d "=" -f 2)"
export "$k=$v"
done < <(grep -e "^\(title\|artist\|album\|stationName\|pRet\|pRetStr\|wRet\|wRetStr\|songDuration\|songPlayed\|rating\|coverArt\|stationCount\|station[0-9]*\)=" /dev/stdin) # don’t overwrite $1…
album=$(echo "$album" | sed "s/ (Explicit)//g")
case "$1" in
"songstart")
echo "$artist\\$title\\$album\\$stationName" > $HOME/.config/pianobar/nowplaying
;;
"songfinish")
rm $HOME/.config/pianobar/nowplaying
;;
"songlove")
$0 -M
;;
*)
if [ "$pRet" -ne 1 ]; then
echo "$1 failed"
elif [ "$wRet" -ne 1 ]; then
echo "$a failed, network error."
fi
;;
esac
exit 0' > $xdgPath/pianobar/eventcmd.sh
}

#configure pianobar
configure_pianobar()
{
    #remove all old settings
    rm -rf $xdgPath/pianobar &> /dev/null
    # create new directory
    mkdir -p $xdgPath/pianobar &> /dev/null
    #create fifo
    mkfifo $xdgPath/pianobar/ctl &> /dev/null
    read -p "Enter your pandora user name (email address): " pUser
    read -p "Enter your pandora password or leave blank to be prompted each time Pianobar starts: " pPass
    echo "user = $pUser" > "$xdgPath/pianobar/config"
    if [ -n "$pPass" ]; then
        echo "password = $pPass" >> "$xdgPath/pianobar/config"
    fi
    echo "event_command = $xdgPath/pianobar/eventcmd.sh" >> "$xdgPath/pianobar/config"
    #create eventcmd.sh it is a function to help keep code formatting as clean as possible.
    create_eventcmd
    chmod 700 $xdgPath/pianobar/eventcmd.sh
    echo "Pianobar setup complete. Please restart Pianobar for changes to take effect."
    exit 0
}

# Display information
display_text()
{
    # backup IFS
    ifs="$IFS"
    IFS=$'\n'
    rm -f $configPath/history
    createdAt=($(echo "$1" | grep '^  <created_at>' | sed -e 's/^  <created_at>//' -e 's/<\/created_at>$//'))
    name=($(echo "$1" | grep '^   <name>' | sed -e 's/^   <name>//' -e 's/<\/name>$//' -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&amp;/&/g'))
    screenName=($(echo "$1" | grep '^   <screen_name>' | sed -e 's/^   <screen_name>//' -e 's/<\/screen_name>$//' -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&amp;/&/g'))
    source=($(echo "$1" | grep '^  <source>' | sed -e 's/^  <source>//' -e 's/<\/source>$//' -e 's/&lt;a href=&quot;http:\/\/twitter\.com\/&quot; rel=&quot;nofollow&quot;&gt;//' -e 's/&lt;\/a&gt;//'))
    text=($(echo "$1" | grep '^  <text>' | sed -e 's/^  <text>//' -e 's/<\/text>$//' -e 's/&quot;/"/g' -e "s/&apos;/'/g" -e 's/&gt;/>/g' -e 's/&lt;/</g'))
    uri=($(echo "$1" | grep '^  <uri>' | sed -e 's/^  <uri>tag://' -e 's/^  <uri>http:\/\///' -e 's/<\/uri>$//' | cut -d ',' -f1 | cut -d / -f1))
    statusId=($(echo "$1" | grep '^  <id>' | sed -e 's/^  <id>//' -e 's/<\/id>$//'))
    #display info
    i=0
    unset pagerText
    while [ $i -lt ${#name[*]} ]; do
        pagerText="${pagerText}\e[${color}m${name[$i]}\e[0m [$i]: ${text[$i]}\n\e[${color}mPosted:\e[0m ${createdAt[$i]} \e[${color}mby\e[0m ${screenName[$i]}@${uri[$i]} \e[${color}mfrom\e[0m ${source[$i]}\n\n"
        echo "$i=${uri[$i]}:name=${screenName[$i]}:reply_id=${statusId[$i]}" >> $configPath/history
        ((i++))
    done
    IFS="$ifs"
    echo -e "$pagerText" | fold -s | $PAGER
}

# Set up the configuration directory information
configPath="${XDG_CONFIG_HOME:-$HOME/.config}"
configPath="${configPath}/gasher"
if [ ! -d "$configPath" ]; then
        mkdir -p "$configPath"
fi

# Create settings if they do not exist.
if [ ! -f "$configPath/config" ]; then
        echo "Welcome to $clientName! Brought to you by 2MB Solutions: https://2mb.solutions"
        echo "It appears you do not have a GNU Social account configured."
        echo "Setup is quick and painless."
        echo
        read -p "Please enter your GNU Social username, This is the part before the @ symbol: " userName
        read -p "Please enter your GNU Social node: " -e -i 2mb.social userNode
        read -sp "Please enter your GNU Social password: " password
        # Simple obfuscation of username and passwords, also allows for special symbols
        userName="$(echo "$userName" | base64 -)"
        password="$(echo "$password" | base64 -)"
        read -p "Post music to a group? You need to subscribe to the group for this to work: " -e -i listening musicGroup
        echo "Please choose one of the following colors: "
        select color in Black Red Green Yellow Blue Violet Cyan White; do
            color="${color^^}"
            if [ -n "$color" ]; then
                break
            fi
        done
        echo -e "# Colors\nRED=31\nGREEN=32\nYELLOW=33\nBLUE=34\nVIOLET=35\nCYAN=36\nWHITE=37\n" > "$configPath/config"
        echo -e "userName=${userName}\npassword=${password}\nuserNode=${userNode}\ncolor=\$$color\nretrieve=100" >> "$configPath/config"
        if [ -n "$musicGroup" ] ; then
                echo "musicGroup=${musicGroup}" >> "$configPath/config"
        fi
    if command -v mpv &> /dev/null ; then
        mediaplayer="$(command -v mpv) -really-quiet -vo null"
    elif command -v mplayer &> /dev/null ; then
        mediaplayer="$(command -v mplayer) -really-quiet -vo null"
    elif command -v sox &> /dev/null ; then
        mediaplayer="$(command -v play)"
    fi
        if [ -n "$mediaplayer" ] ; then
                echo "mediaplayer=\"${mediaplayer}\"" >> "$configPath/config"
        fi
    chmod 600 "$configPath/config"
        if [ $? -eq 0 ] ; then
                echo "Thanks, setup is now complete. Welcome to $clientName $(echo "$userName" | base64 --decode -)@$userNode."
        exit 0
        fi
fi

notify()
{
        if [ $gui ]; then
                $gui --notify --timeout 5 --selectable-labels --text "$*"
        else
                echo "$*"
        fi
}

# read settings
case "$1" in
    "-a" | "--account")
            shift
            source "$configPath/config.$1"
            shift
esac
if [ -z "$userName" ]; then
    source "$configPath/config"
fi
# Deobfuscate username and password:
userName="$(echo "$userName" | base64 --decode -)"
password="$(echo "$password" | base64 --decode -)"
# Pager is set here, to allow the PAGER variable to be set in either invironment or gasher's config
PAGER="${PAGER:-more}"
# set default curl options:
curlOpts="${curlOpts:--s}"
# Set the number of statuses to retrieve:
retrieve="${retrieve:-100}"
# Set media player
play="$mediaplayer"

# Find out if we have GUI capabilities
unset gui
if [[ -n "$DISPLAY" ]]; then
    if hash yad &> /dev/null ; then
        gui="$(which yad)"
    fi
fi

# actions are based on $1
# Default is -t
if [ $# -eq 0 ]; then
    action="--timeline"
else
    action="$1"
fi
if echo "$action" | grep -i ".*\(v\)\|\(-verify\)" ; then
    verify="true"
    action="$(echo "$action" | sed -e 's/-verify//' -e 's/v//i')"
fi
case "$action" in
    "-d" | "--direct-messages" | "")
        result="$(curl $curlOpts -u "$userName:$password" https://${userNode}/api/statuses/direct_messages/show.xml)"
        display_text "$result"
    ;;
    "-D" | "--post-direct-message")
        shift
        target="$1"
        shift
        if [ $# -eq 0 ]; then
            file="$(mktemp)"
            echo "@$name " > "$file"
            editor="${EDITOR:-nano}"
            $editor "$file"
            message="$(cat "$file")"
            rm "$file" &> /dev/null
        else
            message="$*"
            if [ "$verify" = "true" ]; then
                read -p "Edit direct message to $target or press control+c to abort:
                " -e -i "$message" message
            fi
        fi
        result="$(curl $curlOpts -u "$userName:$password" -d user="$target" --data-urlencode text="$message" -d source="$clientName" https://${userNode}/api/direct_messages/new.xml)"
        error="$(echo "$result" | grep '^ <error>' | sed -e 's/<error>//' -e 's/<\/error>//' -e 's/^ //')"
        if [ -n "$error" ]; then
            notify "$error"
            exit 1
        fi
        notify "Message sent."
    ;;
    "-f" | "--follow")
        shift
        result="$(curl $curlOpts -u "$userName:$password" -d screen_name="$1" https://${userNode}/api/friendships/create.xml)"
        error="$(echo "$result" | grep '^ <error>' | sed -e 's/<error>//' -e 's/<\/error>//' -e 's/^ //')"
        if [ -n "$error" ]; then
            notify "$error"
            exit 1
        fi
        echo "You now follow $1."
    ;;
    "-F" | "--favorite")
        shift
        target="$1"
        shift
        if ! [[ "$target" =~ ^[0-9]+$ ]]; then
            echo "Reply target must be a number. It's the number in brackets just after the name."
            exit 0
        fi
        id="$(grep "^$target" "$configPath/history" | cut -d '=' -f4)"
        if [ -z "$id" ]; then
            echo "Favorite code not found."
            exit 0
        fi
        result="$(curl $curlOpts -u "$userName:$password" -d id="$id" https://${userNode}/api/favorites/create.xml)"
        error="$(echo "$result" | grep '^ <error>' | sed -e 's/<error>//' -e 's/<\/error>//' -e 's/^ //')"
        if [ -n "$error" ]; then
            notify "$error"
            exit 1
        fi
        notify "Notice $id favorited."
    ;;
    "--pimp")
        # This just sets the variable pimp to true before falling through to the next matching case.
        pimp=true
    ;;&
    "-p" | "--post")
        shift
        if [ $# -eq 0 ]; then
            file="$(mktemp)"
            editor="${EDITOR:-nano}"
            $editor "$file"
            message="$(cat "$file")"
            rm "$file" &> /dev/null
        else
            message="$*"
            if [ "$verify" = "true" ]; then
                read -p "Edit message or press control+c to abort:
                " -e -i "$message" message
            fi
        fi
        if [ "$pimp" = "true" ]; then
            message="$(curl -s --data-urlencode English="$message" --data-urlencode submit=" Talk Like a Pimp " http://joel.net/EBONICS/translator/ | grep -A9 '<div class="bubble1 comicfont">' | sed -e '/<div/d' -e '/<\/div>/d' -e "s/&#39;/'/g")"
        fi
        result="$(curl $curlOpts -u "$userName:$password" --data-urlencode status="$message" -d source="$clientName" https://${userNode}/api/statuses/update.xml)"
        error="$(echo "$result" | grep '^ <error>' | sed -e 's/<error>//' -e 's/<\/error>//' -e 's/^ //')"
        if [ -f "$file" ]; then
            rm "$file" &> /dev/null
        fi
        if [ -n "$error" ]; then
            notify "$error"
            exit 1
        fi
        notify "Notice posted."
    ;;
    "-g" | "--group")
        shift
        result="$(curl $curlOpts -u "$userName:$password" -d "id=$clientName" -d "uri=$1" https://${userNode}/api/statusnet/groups/join.xml)"
        echo "$result"
    ;;
    "-m"* | "--mentions"*)
        count=$(echo "$action" | tr -cd "[:digit:]")
        if [ -n "$count" ]; then
            retrieve=$count
        fi
        result="$(curl $curlOpts -u "$userName:$password" -d count="$retrieve" https://${userNode}/api/statuses/mentions_timeline.xml)"
        display_text "$result"
    ;;
    "-M" | "--music")
        #This is based on currently running music player.
        if pgrep audacious &> /dev/null ; then
            album="$(audtool --current-song-tuple-data album)"
            artist="$(audtool --current-song-tuple-data artist)"
            musicPlayer="audacious"
            title="$(audtool --current-song-tuple-data title)"
        elif pgrep cmus &> /dev/null ; then
            album="$(cmus-remote -Q | sed -n 's/^tag album //p')"
            artist="$(cmus-remote -Q | sed -n 's/^tag artist //p')"
            musicPlayer="cmus"
            title="$(cmus-remote -Q | sed -n 's/^tag title //p')"
        elif pgrep deadbeef &> /dev/null ; then
            album="$(deadbeef --nowplaying "%b" 2> /dev/null)"
            artist="$(deadbeef --nowplaying "%a" 2> /dev/null)"
            musicPlayer="deadbeef"
            title="$(deadbeef --nowplaying "%t" 2> /dev/null)"
        elif pgrep mopidy &> /dev/null ; then
            album="$(mpc -f %album% current)"
            artist="$(mpc -f %artist% current)"
            musicPlayer="mopidy"
            title="$(mpc -f %title% current)"
        elif pgrep mpd &> /dev/null ; then
            album="$(mpc -f %album% current)"
            artist="$(mpc -f %artist% current)"
            musicPlayer="mpd"
            title="$(mpc -f %title% current)"
        elif pgrep pianobar &> /dev/null ; then
            if [ -f "$xdgPath/pianobar/nowplaying" ]; then
            album="$(cut -f 3 -d '\' "$xdgPath/pianobar/nowplaying" 2> /dev/null)"
            artist="$(cut -f 1 -d '\' "$xdgPath/pianobar/nowplaying" 2> /dev/null)"
            musicPlayer="pianobar"
            station="$(cut -f 4 -d '\' "$xdgPath/pianobar/nowplaying" 2> /dev/null)"
            title="$(cut -f 2 -d '\' "$xdgPath/pianobar/nowplaying" 2> /dev/null)"
        else
            echo "Pianobar is running, but there is no $xdgPath/pianobar/nowplaying file."
            echo "$clientName can configure Pianobar for you, but this will completely overwrite any existing configuration files."
            read -n1 -p "Would you like to create a completely new Pianobar configuration? " continue
            if [ "${continue^}" = "Y" ] ; then
                configure_pianobar
            fi
        fi 
        elif pgrep xmms2 &> /dev/null ; then
            album="$(xmms2 info | grep album | cut -d '=' -f2- | sed 's/^ //')"
            artist="$(xmms2 info | grep artist | cut -d '=' -f2- | sed 's/^ //')"
            musicPlayer="xmms2"
            title="$(xmms2 info | grep title | cut -d '=' -f2- | sed 's/^ //')"
        else
            notify "Sorry, $client name couldn't detect any music information."
            exit 0
        fi
        if [ "$album" = "${album/ /}" ]; then
            album="#$album"
        fi
        if [ "$artist" = "${artist/ /}" ]; then
            artist="#$artist"
        fi
        if [ "$title" = "${title/ /}" ]; then
            title="#$title"
        fi
        if [ -n "$album" -a -n "$artist" -a -n "$title" ]; then
            message="#NowPlaying $title by $artist from $album via #$musicPlayer"
        elif [ -n "$artist" -a -n "$title" ]; then
            message="#NowPlaying $title by $artist via #$musicPlayer"
        else
            notify "Sorry, the current song is either incompletely or improperly tagged. Cannot post."
            exit 0
        fi
        if [ -n "$musicGroup" ] ; then
            message="${message} !${musicGroup}"
        fi
        if [ -n "$station" ] ; then
            if [ "$station" = "${station/ /}" ]; then
            station="#$station"
        fi
        message="${message} on station ${station}."
        fi
        if [ "$verify" = "true" ] ; then
            read -p "Edit message or press control+c to abort:
            " -e -i "$message" message
        fi
        $0 -p "$message"
    ;;
    "-n" | "--notify")
        if ! [[ "$rate" =~ ^[0-9]+$ ]]; then
            rate=300
        fi
        #Initialize values
        newId="$(curl $curlOpts -u "$userName:$password" -d count="1" https://${userNode}/api/statuses/home_timeline.xml | grep '^  <id>' | tr -cd "[:digit:]")"
        oldId=$newId
        while :; do
            oldId="$(head -n1 "$configPath/history" | rev | cut -d '=' -f1 | rev)"
            newId="$(curl $curlOpts -u "$userName:$password" -d count="1" https://${userNode}/api/statuses/home_timeline.xml | grep '^  <id>' | tr -cd "[:digit:]")"
            if [ $oldId -ne $newId ]; then
                play -nqV0 synth pl C2 pl C3 pl E2 pl E3 pl G2 pl G3 pl C4 pl C5 pl E4 pl E5 pl G4 pl G5 delay 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 fade h 0 2.5 1.5 remix - flanger 0 5 chorus 0.25 0.15 100 0.99 0.1 9.9 -s norm &> /dev/null
                oldId=$newId
            fi
            sleep $rate
        done
    ;;
    "-P"* | "--play"*)
        shift
        target="$1"
        shift
        if ! [[ "$target" =~ ^[0-9]+$ ]]; then
            echo "Quote target must be a number. It's the number in brackets just after the name."
            exit 0
        fi
        in_reply_to="$(grep -m1 "^$target" "$configPath/history" | cut -d '=' -f4)"
        if [ -z "$in_reply_to" ]; then
            echo "Status code not found."
            exit 0
        fi
        status="$(curl $curlOpts -u "$userName:$password" "${userNode}/api/statuses/show.xml?id=${in_reply_to}" | grep '^ <text>' | sed -e 's/^ <text>//' -e 's/<\/text>$//')\""
        for i in ${status[@]} ; do
            if [[ "$i" =~ http://sndup.net/.*/[ad] ]]; then
                $play "$(echo "$i" | sed 's/a$/d/')"
            fi
        done
    ;;
    "-Q"* | "--quote"*)
        shift
        target="$1"
        shift
        if ! [[ "$target" =~ ^[0-9]+$ ]]; then
            echo "Quote target must be a number. It's the number in brackets just after the name."
            exit 0
        fi
        in_reply_to="$(grep -m1 "^$target" "$configPath/history" | cut -d '=' -f4)"
        if [ -z "$in_reply_to" ]; then
            echo "Quote code not found."
            exit 0
        fi
        name="$(grep -m1 "^$target=" "$configPath/history" | cut -d '=' -f3 | cut -d ':' -f1)"
        name="${name}@$(grep "^$target=" "$configPath/history" | cut -d '=' -f2 | cut -d ':' -f1)"
        if echo "$name" | grep "$userNode" &> /dev/null ; then
            name="$(echo "$name" | cut -d '@' -f1)"
        fi
        file="$(mktemp)"
        quote="QT @$name \""
        quote="${quote}$(curl $curlOpts -u "$userName:$password" "${userNode}/api/statuses/show.xml?id=${in_reply_to}" | grep '^ <text>' | sed -e 's/^ <text>//' -e 's/<\/text>$//')\""
        echo "$quote " > "$file"
        editor="${EDITOR:-nano}"
        $editor "$file"
        message="$(cat "$file")"
        rm "$file" &> /dev/null
        quote="QT @$name "
        quote="${quote}$(curl $curlOpts -u "$userName:$password" "${userNode}/api/statuses/show.xml?id=${in_reply_to}" | grep '^ <text>' | sed -e 's/^ <text>//' -e 's/<\/text>$//')"
        result="$(curl $curlOpts -u "$userName:$password" --data-urlencode status="$message" -d in_reply_to_status_id="$in_reply_to" -d source="$clientName" $userNode/api/statuses/update.xml)"
        error="$(echo "$result" | grep '^ <error>' | sed -e 's/<error>//' -e 's/<\/error>//' -e 's/^ //')"
        if [ -n "$error" ]; then
            notify "$error"
            exit 1
        fi
        notify "Notice posted containing quote from $name."
    ;;
    "-r"* | "--reply"*)
        shift
        target="$1"
        shift
        if ! [[ "$target" =~ ^[0-9]+$ ]]; then
            echo "Reply target must be a number. It's the number in brackets just after the name."
            exit 0
        fi
        in_reply_to="$(grep -m1 "^$target" "$configPath/history" | cut -d '=' -f4)"
        if [ -z "$in_reply_to" ]; then
            echo "Reply code not found."
            exit 0
        fi
        name="$(grep -m1 "^$target=" "$configPath/history" | cut -d '=' -f3 | cut -d ':' -f1)"
        name="${name}@$(grep "^$target=" "$configPath/history" | cut -d '=' -f2 | cut -d ':' -f1)"
        if echo "$name" | grep "$userNode" &> /dev/null ; then
            name="$(echo "$name" | cut -d '@' -f1)"
        fi
        if [ $# -eq 0 ]; then
            file="$(mktemp)"
            echo "@$name " > "$file"
            editor="${EDITOR:-nano}"
            $editor "$file"
            message="$(cat "$file")"
            rm "$file" &> /dev/null
        else
            message=" @$name $*"
            if [ "$verify" = "true" ] ; then
                read -p "Edit message or press control+c to abort:
                " -e -i "$message" message
            fi
        fi
        result="$(curl $curlOpts -u "$userName:$password" --data-urlencode status="$message" -d in_reply_to_status_id="$in_reply_to" -d source="$clientName" https://${userNode}/api/statuses/update.xml)"
        error="$(echo "$result" | grep '^ <error>' | sed -e 's/<error>//' -e 's/<\/error>//' -e 's/^ //')"
        if [ -n "$error" ]; then
            notify "$error"
            exit 1
        fi
        notify "Comment posted in reply to $name."
    ;;
    "-R" | "--repeat")
        shift
        target="$1"
        shift
        if ! [[ "$target" =~ ^[0-9]+$ ]]; then
            echo "Reply target must be a number. It's the number in brackets just after the name."
            exit 0
        fi
        id="$(grep "^$target=" "$configPath/history" | cut -d '=' -f4)"
        if [ -z "$id" ]; then
            echo "Favorite code not found."
            exit 0
        fi
        result="$(curl $curlOpts -u "$userName:$password" -d id="$id" -d source="$clientName" https://${userNode}/api/statuses/retweet/${target}.xml)"
        error="$(echo "$result" | grep '^ <error>' | sed -e 's/<error>//' -e 's/<\/error>//' -e 's/^ //')"
        if [ -n "$error" ]; then
            notify "$error"
            exit 1
        fi
        notify "Notice $id repeated."
    ;;
    "-s" | "--soundclip")
        file="$(mktemp --suffix .flac)"
        oggFile="$(mktemp --suffix .ogg)"
        echo "Recording... Press control+c when you are finished."
        rec -t flac -qV0 "$file"
        sox -t flac "$file" "$oggFile" norm
        rm -f "$file"
        if [ "$verify" = "true" ]; then
            echo
            echo "This is your file, press control+c to skip playback:"
            play -qV0 "$oggFile" &> /dev/null
        fi
        upload="$(curl $curlOpts --form file="@$oggFile" --form submit=upload http://sndup.net/post.php)"
            jsonInfo="$(echo "$upload" | sed 's/,/\n/g')"
        fileUrl="$(echo "$jsonInfo" | grep 'url' | sed -e 's/^{"url":"//' -e 's/\/a/\/d/' | tr -d '"\\')"
        rm -f "$oggFile"
        message="#audio $fileUrl #soundclip"
        if [ "$verify" = "true" ]; then
            echo
            read -p "Edit message or press enter to send. Press contrl_c to abort:
            " -e -i "$message" message
        fi
        $0 -p "$message"
    ;;
    "-t"* | "--timeline"*)
        count=$(echo "$action" | tr -cd "[:digit:]")
        if [ -n "$count" ]; then
            retrieve=$count
        fi
        result="$(curl $curlOpts -u "$userName:$password" -d count="$retrieve" https://${userNode}/api/statuses/home_timeline.xml)"
        display_text "$result"
    ;;
    "-u"* | "--user"*)
        count=$(echo "$action" | tr -cd "[:digit:]")
        if [ -n "$count" ]; then
            retrieve=$count
        fi
        result="$(curl $curlOpts -u "$userName:$password" -d count="$retrieve" https://${userNode}/api/statuses/home_timeline.xml)"
        display_text "$result"
    ;;
    *)
        show_help
esac
exit 0
