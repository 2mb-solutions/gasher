#!/bin/bash

# A note on code formatting. I am blind, and usually only add indention as an after thought.
#If you want to contribute and need the indention, and feel like fixing it, by all means, feel free to do so.
#Otherwise, I'll get to it eventually... Maybe.

clientName="${0##*/}"
clientName="${clientName^}"

show_help()
{
cat << EOF
$clientName, a 2MB Solutions product.
 released under the GPL version 3 or later.
For more great stuff, visit http://2mb.solutions
Solutions at the speed of AWESOME!

Usage:
$0 -a --account name: Use config file $configPath/config.name. Useful if you have multiple accounts.
$0 -d --direct-messages: View your direct messages.
$0 -D --post-direct-message recipient message: Send a direct message.
$0 -F --favorite status_code: Favorite the notice with the code you chose. The codes are in the brackets just after the name.
$0 -f --follow user_id: follow given user.
$0 -G --group group+uri: subscribe to the given group.
$0 -h --help: This help screen.
$0 -m --mentions: Read your mensions (replies).
$0 -M --music: automatically post the playing song. Supported clients are cmus, mpd, pianobar, and xmms2.
$0 -n --notify: Notify you of new activity. You can add rate=seconds to the config file. The default is 300 (5 minutes).
Add an & to send the process to the background
$0 -p --post: Post to your node.
$0 -r --reply number: reply to someone. Number is the number in brackets after their name.
$0 -s --soundclip: Interactively post a soundclip.
$0 -t --timeline: Read your timeline.
$0 -u --user: Read your statuses only.
For commands that post a status, add v, V, or -verify to view your status before posting.
You can then edit the status or press control+c to cancel.
When requesting statuses, add a number to specify how many to retrieve. for example to see the last three items in your
timeline, type $0 -t3
When entering your password during setup, If the password contains a space, put quotes around it, like "pass word".
EOF
}

#configure pianobar
configure_pianobar()
{
#remove all old settings
rm -rf $xdgPath/pianobar &> /dev/null
# create new directory
mkdir -p $xdgPath/pianobar &> /dev/null
#create fifo
mkfifo $xdgPath/pianobar/ctl &> /dev/null
read -p "Enter your pandora user name (email address): " pUser
read -p "Enter your pandora password or leave blank to be prompted each time Pianobar starts: " pPass
echo "user = $pUser" > "$xdgPath/pianobar/config"
if [ -n "$pPass" ]; then
echo "password = $pPass" >> "$xdgPath/pianobar/config"
fi
echo "event_command = $xdgPath/pianobar/eventcmd.sh" >> "$xdgPath/pianobar/config"
#create eventcmd.sh
echo '#!/bin/bash
# create variables
while read L; do
k="$(echo "$L" | cut -d "=" -f 1)"
v="$(echo "$L" | cut -d "=" -f 2)"
export "$k=$v"
done < <(grep -e "^\(title\|artist\|album\|stationName\|pRet\|pRetStr\|wRet\|wRetStr\|songDuration\|songPlayed\|rating\|coverArt\|stationCount\|station[0-9]*\)=" /dev/stdin) # don’t overwrite $1…
album=$(echo "$album" | sed "s/ (Explicit)//g")
case "$1" in
"songstart")
echo "$artist\\$title\\$album" > $HOME/.config/pianobar/nowplaying
;;
"songfinish")
rm $HOME/.config/pianobar/nowplaying
;;
"songlove")
$0 -M
;;
*)
if [ "$pRet" -ne 1 ]; then
echo "$1 failed"
elif [ "$wRet" -ne 1 ]; then
echo "$a failed, network error."
fi
;;
esac
exit 0' > $xdgPath/pianobar/eventcmd.sh
chmod 700 $xdgPath/pianobar/eventcmd.sh
echo "Pianobar setup complete. Please restart Pianobar for changes to take effect."
exit 0
}

# Display information
display_text()
{
# backup IFS
ifs="$IFS"
IFS=$'\n'
rm -f $configPath/history
createdAt=($(echo "$1" | grep '^  <created_at>' | sed -e 's/^  <created_at>//' -e 's/<\/created_at>$//'))
name=($(echo "$1" | grep '^   <name>' | sed -e 's/^   <name>//' -e 's/<\/name>$//'))
screenName=($(echo "$1" | grep '^   <screen_name>' | sed -e 's/^   <screen_name>//' -e 's/<\/screen_name>$//'))
source=($(echo "$1" | grep '^  <source>' | sed -e 's/^  <source>//' -e 's/<\/source>$//'))
text=($(echo "$1" | grep '^  <text>' | sed -e 's/^  <text>//' -e 's/<\/text>$//' -e 's/&quot;/"/g' -e "s/&apos;/'/g"))
uri=($(echo "$1" | grep '^  <uri>tag:' | sed -e 's/^  <uri>tag://' -e 's/<\/uri>$//'))
statusId=($(echo "$1" | grep '^  <id>' | sed -e 's/^  <id>//' -e 's/<\/id>$//'))
#display info
i=0
unset pagerText
while [ $i -lt ${#name[*]} ]; do
pagerText="${pagerText}${name[$i]} [$i]: ${text[$i]}\nPosted: ${createdAt[$i]} from ${source[$i]}\n"
echo "$i=${uri[$i]}:name=${screenName[$i]}:reply_id=${statusId[$i]}" >> $configPath/history
((i++))
done
IFS="$ifs"
echo -e "$pagerText" | $PAGER
}

# Set up the configuration directory information
if [ -z "$XDG_CONFIG_HOME" ]; then
    configPath="$HOME/.config/gasher"
xdgPath="$HOME/.config"
else
    configPath="$XDG_CONFIG_HOME/gasher"
    xdgPath="$XDG_CONFIG_HOME"
fi
if [ ! -d "$configPath" ]; then
    mkdir -p "$configPath"
fi

# Create settings if they do not exist.
if [ ! -f "$configPath/config" ]; then
    echo "Welcome to $clientName! A 2MB Solutions product."
    echo "It appears you do not have a GNU Social account configured."
    echo "Setup is quick and painless."
    echo
    read -p "Please enter your GNU Social username, This is the part before the @ symble: " userName
    read -p "Please enter your GNU Social node: " -e -i social.2mb.solutions userNode
    read -sp "Please enter your GNU Social password: " password
    echo
    echo -e "userName=$userName\npassword=$password\nuserNode=$userNode" > "$configPath/config"
    if [ $? -eq 0 ] ; then
        echo "Thanks, setup is now complete. Welcome to $clientName $userName@$userNode."
    fi
fi

# read settings
case "$1" in
"-a" | "--account")
    shift
    source "$configPath/config.$1"
    shift
esac
if [ -z "$userName" ]; then
    source "$configPath/config"
fi
# Pager is set here, to allow the PAGER variable to be set in either invironment or gasher's config
if [ -z "$PAGER" ]; then
    PAGER=more
fi

# actions are based on $1
# Default is -t
if [ $# -eq 0 ]; then
action="--timeline"
else
action="$1"
fi
if echo "$action" | grep -i ".*\(v\)\|\(-verify\)" ; then
verify="true"
action="$(echo "$action" | sed -e 's/-verify//' -e 's/v//i')"
fi
case "$action" in
"-d" | "--direct-messages" | "")
result="$(curl -s -u "$userName:$password" $userNode/api/statuses/direct_messages_timeline.xml)"
display_text "$result"
;;
"-D" | "--post-direct-message")
shift
target="$1"
shift
status="$*"
if [ "$verify" = "true" ]; then
read -p "Edit direct message to $target or press control+c to abort:
" -e -i "$status" status
fi
result="$(curl -s -u "$userName:$password" -d user="$target" -d text="$status" -d source="$clientName" $userNode/api/direct_messages/new.xml)"
error="$(echo "$result" | grep '^ <error>' | sed -e 's/<error>//' -e 's/<\/error>//' -e 's/^ //')"
if [ -n "$error" ]; then
echo "$error"
exit 1
fi
echo "Message sent."
;;
"-f" | "--follow")
shift
result="$(curl -s -u "$userName:$password" -d screen_name="$1" $userNode/api/friendships/create.xml)"
error="$(echo "$result" | grep '^ <error>' | sed -e 's/<error>//' -e 's/<\/error>//' -e 's/^ //')"
if [ -n "$error" ]; then
echo "$error"
exit 1
fi
echo "You now follow $1."
;;
"-F" | "--favorite")
shift
target="$1"
shift
if ! [[ "$target" =~ ^[0-9]+$ ]]; then
echo "Reply target must be a number. It's the number in brackets just after the name."
exit 0
fi
id="$(grep "^$target" "$configPath/history" | cut -d '=' -f6)"
if [ -z "$id" ]; then
echo "Favorite code not found."
exit 0
fi
result="$(curl -s -u "$userName:$password" -d id="$id" $userNode/api/favorites/create.xml)"
error="$(echo "$result" | grep '^ <error>' | sed -e 's/<error>//' -e 's/<\/error>//' -e 's/^ //')"
if [ -n "$error" ]; then
echo "$error"
exit 1
fi
echo "Notice $id favorited."
;;
"-p" | "--post")
shift
message="$*"
if [ "$verify" = "true" ]; then
read -p "Edit message or press control+c to abort:
" -e -i "$message" message
fi
result="$(curl -s -u "$userName:$password" -d status="$message" -d source="$clientName" $userNode/api/statuses/update.xml)"
error="$(echo "$result" | grep '^ <error>' | sed -e 's/<error>//' -e 's/<\/error>//' -e 's/^ //')"
if [ -n "$error" ]; then
echo "$error"
exit 1
fi
echo "Notice posted."
;;
"-g" | "--group")
shift
result="$(curl -s -u "$userName:$password" -d "id=$clientName" -d "uri=$1" $userNode/api/statusnet/groups/join.xml)"
echo "$result"
;;
"-m"* | "--mentions"*)
count=$(echo "$action" | tr -cd "[:digit:]")
if [ -z "$count" ]; then
count=20
fi
result="$(curl -s -u "$userName:$password" -d count="$count" $userNode/api/statuses/mentions_timeline.xml)"
display_text "$result"
;;
"-M" | "--music")
#This is based on currently running music player.
if pgrep audacious &> /dev/null ; then
album="$(audtool --current-song-tuple-data album)"
artist="$(audtool --current-song-tuple-data artist)"
musicPlayer="audacious"
title="$(audtool --current-song-tuple-data title)"
elif pgrep cmus &> /dev/null ; then
album="$(cmus-remote -Q | sed -n 's/^tag album //p')"
artist="$(cmus-remote -Q | sed -n 's/^tag artist //p')"
musicPlayer="cmus"
title="$(cmus-remote -Q | sed -n 's/^tag title //p')"
elif pgrep deadbeef &> /dev/null ; then
album="$(deadbeef --nowplaying "%b" 2> /dev/null)"
artist="$(deadbeef --nowplaying "%a" 2> /dev/null)"
musicPlayer="deadbeef"
title="$(deadbeef --nowplaying "%t" 2> /dev/null)"
elif pgrep mpd &> /dev/null ; then
album="$(mpc -f %album% current)"
artist="$(mpc -f %artist% current)"
musicPlayer="mpd"
title="$(mpc -f %title% current)"
elif pgrep pianobar &> /dev/null ; then
if [ -f "$xdgPath/pianobar/nowplaying" ]; then
album="$(cut -f 3 -d '\' "$xdgPath/pianobar/nowplaying" 2> /dev/null)"
artist="$(cut -f 1 -d '\' "$xdgPath/pianobar/nowplaying" 2> /dev/null)"
musicPlayer="pianobar"
title="$(cut -f 2 -d '\' "$xdgPath/pianobar/nowplaying" 2> /dev/null)"
else
echo "Pianobar is running, but there is no $xdgPath/pianobar/nowplaying file."
echo "$clientName can configure Pianobar for you, but this will completely overwrite any existing configuration files."
read -n1 -p "Would you like to create a completely new Pianobar configuration? " continue
if [ "${continue^}" = "Y" ] ; then
configure_pianobar
fi
fi 
elif pgrep xmms2 &> /dev/null ; then
album="$(nyxmms2 info | grep album | cut -d '=' -f2- | sed 's/^ //')"
artist="$(nyxmms2 info | grep artist | cut -d '=' -f2- | sed 's/^ //')"
musicPlayer="xmms2"
title="$(nyxmms2 info | grep title | cut -d '=' -f2- | sed 's/^ //')"
else
echo "Sorry, $client name couldn't detect any music information."
exit 0
fi
if [ -n "$album" -a -n "$artist" -a -n "$title" ]; then
message="#NowPlaying \"$title\" by \"$artist\" from \"$album\" via #$musicPlayer !listening"
elif [ -n "$artist" -a -n "$title" ]; then
message="#NowPlaying \"$title\" by \"$artist\" via #$musicPlayer !listening"
else
echo "Sorry, the current song is either incompletely or improperly tagged. Cannot post."
exit 0
fi
if [ "$verify" = "true" ] ; then
read -p "Edit message or press control+c to abort:
" -e -i "$message" message
fi
$0 -p "$message"
message="#NowPlaying \"$title\" by \"$artist\" from \"$album\" via #$musicPlayer !listening"
;;
"-n" | "--notify")
if ! [[ "$rate" =~ ^[0-9]+$ ]]; then
rate=300
fi
while :; do
oldId="$(head -n1 "$configPath/history" | cut -d '=' -f6)"
newId="$(curl -s -u "$userName:$password" -d count="1" $userNode/api/statuses/home_timeline.xml | grep '^  <id>' | tr -cd "[:digit:]")"
if [ $oldId -ne $newId ]; then
play -nqV0 synth pl C2 pl C3 pl E2 pl E3 pl G2 pl G3 pl C4 pl C5 pl E4 pl E5 pl G4 pl G5 delay 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 0.55 fade h 0 2.5 1.5 remix - flanger 0 5 chorus 0.25 0.15 100 0.99 0.1 9.9 -s norm &> /dev/null
fi
sleep $rate
done
;;
"-r"* | "--reply"*)
shift
target="$1"
shift
if ! [[ "$target" =~ ^[0-9]+$ ]]; then
echo "Reply target must be a number. It's the number in brackets just after the name."
exit 0
fi
in_reply_to="$(grep "^$target" "$configPath/history" | cut -d '=' -f6)"
if [ -z "$in_reply_to" ]; then
echo "Reply code not found."
exit 0
fi
name="$(grep "^$target" "$configPath/history" | cut -d '=' -f5 | cut -d ':' -f1)"
name="${name}@$(grep "^$target" "$configPath/history" | cut -d '=' -f2 | cut -d ',' -f1)"
if echo "$name" | grep "$userNode" &> /dev/null ; then
name="$(echo "$name" | cut -d '@' -f1)"
fi
message=" @$name $*"
if [ "$verify" = "true" ] ; then
read -p "Edit message or press control+c to abort:
" -e -i "$message" message
fi
result="$(curl -s -u "$userName:$password" -d status="$message" -d in_reply_to_status_id="$in_reply_to" -d source="$clientName" $userNode/api/statuses/update.xml)"
error="$(echo "$result" | grep '^ <error>' | sed -e 's/<error>//' -e 's/<\/error>//' -e 's/^ //')"
if [ -n "$error" ]; then
echo "$error"
exit 1
fi
echo "Comment posted in reply to $name."
;;
"-s" | "--soundclip")
file="$(mktemp -u)"
echo "Recording... Press control+c when you are finished."
rec -qV0 "$file.wav"
sox "$file.wav" "$file.ogg" norm
rm -f "$file.wav"
if [ "$verify" = "true" ]; then
echo
echo "This is your file, press control+c to skip playback:"
play -qV0 "$file.ogg" &> /dev/null
fi
upload="$(curl -s --form file="@$file.ogg" --form submit=upload http://sndup.net/post.php)"
    jsonInfo="$(echo "$upload" | sed 's/,/\n/g')"
fileUrl="$(echo "$jsonInfo" | grep 'url' | sed -e 's/^{"url":"//' -e 's/\/a/\/d/' | tr -d '"\\')"
rm -f "$file.ogg"
message="#audio $fileUrl #soundclip"
if [ "$verify" = "true" ]; then
echo
read -p "Edit message or press enter to send. Press contrl_c to abort:
" -e -i "$message" message
fi
$0 -p "$message"
;;
"-t"* | "--timeline"*)
count=$(echo "$action" | tr -cd "[:digit:]")
if [ -z "$count" ]; then
count=20
fi
result="$(curl -s -u "$userName:$password" -d count="$count" $userNode/api/statuses/home_timeline.xml)"
display_text "$result"
;;
"-u"* | "--user"*)
count=$(echo "$action" | tr -cd "[:digit:]")
if [ -z "$count" ]; then
count=20
fi
result="$(curl -s -u "$userName:$password" -d count="$count" $userNode/api/statuses/home_timeline.xml)"
display_text "$result"
;;
*)
show_help
esac
exit 0
